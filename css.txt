positioning : absolute , relative.

1. relative -> relative to its position itself.
2.absolute -> relative to the nearest parent with position non static.


display : grid

grid-template-columns:repeat(5,auto); adjust 5 columns with some given no of total (or we can put any no of columns with the width expected .)
grid squares.

3d swapping



transition:

To create a transition effect, you must specify two things:

the CSS property you want to add an effect to
the duration of the effect

animation:
/* The animation code */
@keyframes example {
  from {background-color: red;}
  to {background-color: yellow;}
}

/* The element to apply the animation to */
div {
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
}

transform:
rotate , scale etc

url selectors -> using font face , we can define our own font-family wrt some
available fonts using url src.

****
1. when click backed off card transition help to swap smmothly back to front.
2. when clicked back side rotate 180 degrees Y 
3. dancing animation in case of front faace visible , used keyframes from to to scenese.




-------------
js
1. settimeout(function,timeinms); //start function in time ms run once
2. element.addEventListener("click",()=>{
body});
3. setinterval(func,time ms); // run func every time ms
4.clearinterval(obj of setintercval)
5.  /* css grid order property shuffle order of cards */
  shuffleCards() {
    for (let i = this.cardsArray.length - 1; i > 0; i--) {
      let randIndex = Math.floor(Math.random() * (i + 1));
      this.cardsArray[randIndex].style.order = i;
      this.cardsArray[i].style.order = randIndex;
    }
  }
shuffle logic
